#The top section is on the front end#
#####################################

#Scroll down for back end notes#
################################



Load a lecture as a source to an audio div
Create a notepad for the listener to take notes on the lecture

Design a system for the notepad that will show the listener at
	what point in the lecture his notes were taken

On keypress, make sure there is no keypress for 5 seconds to execute the notemaker, that way his note taking will not be interrupted:
	retrieve the contents of the text area
	retrieve the time of the video

Compare the contents of the text area to the previous contents
	and do the following:
	store the differece of the current contents and the
	previous contents with the retrieved time of video

I need to output these differences in  human readable manner
	I need ideas:

	Store on enter, and clear text box to prepare for new text 
	Problem:	What if he wants to go back and edit something,
				it will have already stored it and cleared out.
	
	Solution:	Create a cue, where there is a lag of one enter,
				so as not to remove text so close to his typing 

For editing:
	Problem:	User may want to keep typing on previously established time blocks which would 				run into the next time stamp
				
	Solution:	allow him to kep typing, and cue up the next time stamps textbox below the 					current text box, and on command of some sort, remove current textbox and bring 			up the next one into view

The interface will look sort of like a facebook message, with the notes already taken being scrolled up the page, with the note taking box remaining stationary.

________________________
|		________	   |
|	Now:|______|	   |
|	1:0...Notes...	   |
|	1:2...Notes...	   |
|	1:3...Notes...	   |
|	1:4...Notes...	   |
|	1:5...Notes...	   |
|		________	   |
|	Now:|______|	   |
|______________________|




##################################################

#back end notes#
################

Use flask to serve page templates and hande accounts

	accounts: user will have an account, this will contain a record of all of his uploads, and notes taken on a given upload

	templates: will serve the page templates for header, footer, etc.

flask will also handle uploading of files, so that a user can upload an audio file to listen to and take notes on. 